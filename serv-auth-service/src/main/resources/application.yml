# ================ Application Configuration ================
spring:
  application:
    name: serv-auth-service
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        enabled: true
        register: true
        instance-id: ${spring.application.name}:${random.uuid}
        service-name: ${spring.application.name}
        prefer-ip-address: true
        health-check-path: /actuator/health
        health-check-interval: 15s
  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive
  # ================ R2DBC Configuration ================
  r2dbc:
    url: ${SPRING_DATASOURCE_URL:r2dbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/auth}
    username: postgres
    password: postgres
    pool:
      enabled: true
      initial-size: 10
      max-size: 50
      max-idle-time: 30m
      max-life-time: 60m
      validation-query: SELECT 1
  # ================ OAuth2 Client Configuration ================
  security:
    oauth2:
      authorizationserver:
        client:
          front-ui-service:
            registration:
              client-id: front-ui-service
              client-secret: $2a$10$OuxpJ2wwsMQABCtQX794deWIPqSaqUgevnNiAghcLrTVN44U2xG2a
              client-authentication-methods: client_secret_basic
              authorization-grant-types: client_credentials
              scopes: account-service.read,account-service.write,user-auth-service.read,user-auth-service.write
          account-service:
            registration:
              client-id: account-service
              client-secret: $2a$10$OuxpJ2wwsMQABCtQX794deWIPqSaqUgevnNiAghcLrTVN44U2xG2a
              client-authentication-methods: client_secret_basic
              authorization-grant-types: client_credentials
              scopes: account-service.read,account-service.write,user-auth-service.read,user-auth-service.write
          user-auth-service:
            registration:
              client-id: user-auth-service
              client-secret: $2a$10$OuxpJ2wwsMQABCtQX794deWIPqSaqUgevnNiAghcLrTVN44U2xG2a
              client-authentication-methods: client_secret_basic
              authorization-grant-types: client_credentials
              scopes: account-service.read,account-service.write,user-auth-service.read,user-auth-service.write
      resourceserver:
        jwt:
          issuer-uri: ${AUTH_SERVICE_JWT_ISSUER_URI:http://localhost:8080/serv-auth-service}
          jwk-set-uri: ${AUTH_SERVICE_JWT_JWK_SET_URI:http://localhost:8080/serv-auth-service/oauth2/jwks}


server:
  port: 9000

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics
  endpoint:
    health:
      show-details: always

# ================ Logging ================
logging:
  level:
    org.springframework: ERROR
    ru.practicum: WARN
    org.springframework.web: WARN
    org.springframework.cloud: WARN
    org.springframework.cloud.gateway: DEBUG
    reactor.netty: ERROR
    org.springframework.security: DEBUG
    org.springframework.cloud.consul: DEBUG
  pattern:
    console: "%d{dd-MM-yyyy HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"