server:
  port: 8085

spring:
  application:
    name: cash-service

  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        enabled: true
        register: true
        instance-id: ${spring.application.name}:${random.uuid}
        service-name: ${spring.application.name}
        prefer-ip-address: true
        health-check-path: /actuator/health
        health-check-interval: 15s

  r2dbc:
    url: ${SPRING_DATASOURCE_URL:r2dbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/cash_service}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    pool:
      enabled: true
      initial-size: 10
      max-size: 50
      max-idle-time: 30m
      max-life-time: 60m
      validation-query: SELECT 1

  main:
    web-application-type: reactive

  # ================ OAuth2 Client Configuration ================
  security:
    oauth2:
      # OAuth2 Resource Server Configuration
      resourceserver:
        jwt:
          issuer-uri: ${AUTH_SERVICE_JWT_ISSUER_URI:http://localhost:8080/serv-auth-service}
          jwk-set-uri: ${AUTH_SERVICE_JWT_JWK_SET_URI:http://localhost:8080/serv-auth-service/oauth2/jwks}
    # OAuth2 Client Configuration
      client:
        registration:
          account-service:
            provider: account-service
            client-id: cash-service
            client-secret: showcase-secret
            client-authentication-method: client_secret_basic
            authorization-grant-type: client_credentials
            scope: account-service.read,account-service.write
          blocker-service:
            provider: blocker-service
            client-id: cash-service
            client-secret: showcase-secret
            client-authentication-method: client_secret_basic
            authorization-grant-type: client_credentials
            scope: blocker-service.read,blocker-service.write
          notification-service:
            provider: notification-service
            client-id: cash-service
            client-secret: showcase-secret
            client-authentication-method: client_secret_basic
            authorization-grant-type: client_credentials
            scope: notification-service.read,notification-service.write
        provider:
          account-service:
            token-uri: ${AUTH_SERVICE_TOKEN_URL:http://localhost:8080/serv-auth-service/oauth2/token}
          blocker-service:
            token-uri: ${AUTH_SERVICE_TOKEN_URL:http://localhost:8080/serv-auth-service/oauth2/token}
          notification-service:
            token-uri: ${AUTH_SERVICE_TOKEN_URL:http://localhost:8080/serv-auth-service/oauth2/token}

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics
    endpoint:
      health:
        show-details: always

logging:
  level:
    org.springframework: DEBUG
    ru.practicum: DEBUG
    org.springframework.web: DEBUG
    org.springframework.cloud.gateway: DEBUG
    reactor.netty: DEBUG
  pattern:
    console: "%d{dd-MM-yyyy HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"