replicaCount: 1

image:
  repository: minikube.local/transfer-service
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8088

env:
  SPRING_PROFILES_ACTIVE: prod
  SPRING_R2DBC_URL: r2dbc:postgresql://postgres-service:5432/transfer_service
  SPRING_R2DBC_USERNAME: postgres
  AUTH_SERVICE_JWT_ISSUER_URI: http://ingress-nginx-controller/serv-auth-service
  AUTH_SERVICE_JWK_SET_URI: http://ingress-nginx-controller/serv-auth-service/oauth2/jwks
  AUTH_SERVICE_TOKEN_URL: http://ingress-nginx-controller/serv-auth-service/oauth2/token
  SPRING_R2DBC_POOL_ENABLED: "true"
  SPRING_R2DBC_POOL_INITIAL_SIZE: "10"
  SPRING_R2DBC_POOL_MAX_SIZE: "50"
  SPRING_R2DBC_POOL_MAX_IDLE_TIME: "30m"
  SPRING_R2DBC_POOL_MAX_LIFE_TIME: "60m"
  SPRING_R2DBC_POOL_VALIDATION_QUERY: "SELECT 1"

secrets:
  DB_PASSWORD: postgres
  CLIENT_SECRET: showcase-secret  # Для OAuth clients

config:
  security:
    oauth2:
      client:
        registration:
          account_service:
            provider: account-service
            client_id: transfer-service
            client_authentication_method: client_secret_basic
            authorization_grant_type: client_credentials
            scope: account-service.read,account-service.write
          blocker_service:
            provider: blocker-service
            client_id: transfer-service
            client_authentication_method: client_secret_basic
            authorization_grant_type: client_credentials
            scope: blocker-service.read,blocker-service.write
          exchange_service:
            provider: exchange-service
            client_id: transfer-service
            client_authentication_method: client_secret_basic
            authorization_grant_type: client_credentials
            scope: exchange-service.read,exchange-service.write
          notification_service:
            provider: notification-service
            client_id: transfer-service
            client_authentication_method: client_secret_basic
            authorization_grant_type: client_credentials
            scope: notification-service.read,notification-service.write
        provider:
          account_service:
            token_uri: "{{ .Values.env.AUTH_SERVICE_TOKEN_URL }}"
          blocker_service:
            token_uri: "{{ .Values.env.AUTH_SERVICE_TOKEN_URL }}"
          exchange_service:
            token_uri: "{{ .Values.env.AUTH_SERVICE_TOKEN_URL }}"
          notification_service:
            token_uri: "{{ .Values.env.AUTH_SERVICE_TOKEN_URL }}"
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
    endpoint:
      health:
        show_details: always
  logging:
    level:
      org_springframework: DEBUG
      ru_practicum: DEBUG
      org_springframework_web: DEBUG
      org_springframework_cloud_gateway: DEBUG
      reactor_netty: DEBUG
    pattern:
      console: "%d{dd-MM-yyyy HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"